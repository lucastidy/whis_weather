import requests
import tkinter as tk
from tkinter import ttk
from datetime import datetime, timedelta

#dropdown = None

def get_forecast():

    URL = 'https://api.openweathermap.org/data/2.5/forecast?lat=50.058592&lon=-122.957281&appid=f72f0b5a77174610a23ee37cb4d66c4a&units=metric'
    response = requests.get(URL)
    json = response.json()

    forecasts = []

    for forecast in json['list']: #list is an array of dicts so forecast becomes each one of these dicts
        time = forecast['dt_txt'].split()[1]
        
        if time == "12:00:00":
            forecasts.append(forecast) # now puts the relevant forecasts inside a new list
    

    return forecasts

def update_weather_timer(root, day_var, weather_label, dropdown):
    print("update_weather_timer called") 
    forecasts = get_forecast()

    #populating a drop down menu  with dates
    days = [forecast['dt_txt'].split()[0] for forecast in forecasts]
    day_var.set("Select a day")
    dropdown['values'] = days

    #Update weather based on selected day
    selected_day = day_var.get()
    print(selected_day)


    if selected_day:
        for forecast in forecasts:
            forecast_date = forecast['dt_txt'].split()[0]
            if selected_day == forecast_date:
                temperature = forecast['main']['temp']
                description = forecast['weather'][0]['description']
                weather_label.config(text=f"Temperature: {temperature}Â°C\nDescription: {description}")
                return
            
    weather_label.config(text="")
    root.after(200000, update_weather_timer, root, day_var, weather_label, dropdown)

def on_dropdown_select(event, root, day_var, weather_label, dropdown):
    selected_value = dropdown.get()  # Get the selected value from the dropdown
    day_var.set(selected_value)  # Set the day_var to the selected value
    # When an option is selected in the dropdown, update the weather display
    update_weather_timer(root, day_var, weather_label, dropdown)

def main():
    #global dropdown
    root = tk.Tk()
    root.title("Whistler 5-Day Forecast")

    root.geometry("800x600")  # Set the window size to 800 pixels wide and 600 pixels tall


    weather_label = tk.Label(root, text="", padx=10, pady=10)  # Create a Label for weather data
    weather_label.pack()

    day_var = tk.StringVar(value="Select a day")

    title_label = tk.Label(root, text="Whistler Blackcomb 5-Day Forecast", font=("Helvetica", 18))
    title_label.pack()

    dropdown = ttk.Combobox(root, textvariable=day_var, font=("Helvetica", 14), height=10)
    dropdown.pack()

    #update_weather_timer(root, day_var, weather_label, dropdown)


    # Bind the callback function to the <ComboboxSelected> event
    dropdown.bind("<<ComboboxSelected>>", lambda event: on_dropdown_select(event, root, day_var, weather_label, dropdown))
    
    update_weather_timer(root, day_var, weather_label, dropdown)
    
    root.mainloop()

if __name__ == "__main__":
    main()
